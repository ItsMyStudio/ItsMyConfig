#CI
name: Build ✨ ItsMyConfig ✨

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4

    # Cache Gradle dependencies and wrapper (skip for pull requests)
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      if: github.event_name != 'pull_request'
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Create Gradle Wrapper
      run: gradle wrapper

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build & Test
      run: ./gradlew shadowJar --info

    - name: Benchmark
      if: false
      run: ./gradlew jmh

    - name: Summarize Failed Tests
      if: failure()
      shell: bash
      run: |
        echo "## ❌ Failed Tests Summary" >> $GITHUB_STEP_SUMMARY

        REPO_URL="https://github.com/Itsme-to/ItsMyConfig/blob/main"
        TEST_SRC="core/src/test/java"
        declare -A seen=

        sudo apt-get update && sudo apt-get install -y xmlstarlet

        mapfile -t files < <(find core/build/test-results/test/ -type f -name "*.xml")

        for file in "${files[@]}"; do
            while IFS='|' read -r class method type message stack; do
                [[ -z "$message" ]] && message="(no message)"
                [[ -z "$type" ]] && type="UnknownException"
                [[ -z "$method" ]] && method="(unknown method)"
                [[ -z "$class" ]] && class="(unknown class)"

                class_file="${class##*.}.java"
                line_number=""

                # Extract line number from stack trace using class_file only
                if [[ "$stack" =~ ${class_file//./\\.}:([0-9]+)\) ]]; then
                    line_number="${BASH_REMATCH[1]}"
                fi

                file_path="$TEST_SRC/${class//./\/}.java"
                link="$REPO_URL/$file_path"
                [[ -n "$line_number" ]] && link="$link#L$line_number"

                if [[ -z "${seen[$class]}" ]]; then
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "#### [$class]($REPO_URL/$file_path)" >> $GITHUB_STEP_SUMMARY
                    seen[$class]=1
                fi

                if [[ "$type" == *"AssertionFailedError"* ]]; then
                    short_message="${message#org.opentest4j.AssertionFailedError: }"
                    echo "- [**$method** (line $line_number)]($link) → $short_message" >> $GITHUB_STEP_SUMMARY
                else
                    echo "- [**$method** (line $line_number)]($link) → $message" >> $GITHUB_STEP_SUMMARY
                fi

                if [[ -n "$stack" ]]; then
                    echo "   <details><summary>🧵 Stack Trace</summary>" >> $GITHUB_STEP_SUMMARY
                    echo "   " >> $GITHUB_STEP_SUMMARY
                    echo '   ```' >> $GITHUB_STEP_SUMMARY
                    printf '%s\n' "$stack" | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
                    echo '   ```' >> $GITHUB_STEP_SUMMARY
                    echo "   </details>" >> $GITHUB_STEP_SUMMARY
                fi
            done < <(xmlstarlet sel -t \
                -m "//testcase[failure]" \
                -v "@classname" -o "|" \
                -v "@name" -o "|" \
                -v "failure/@type" -o "|" \
                -v "failure/@message" -o "|" \
                -v "normalize-space(failure)" -n "$file")
        done

    - name: Extract version and commit hash
      run: |
        echo "PLUGIN_VERSION=$(grep 'version =' build.gradle | awk -F'\"' '{print $2}')" >> $GITHUB_ENV
        echo "COMMIT_HASH=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: itsmyconfig-${{ env.PLUGIN_VERSION }}-${{ env.COMMIT_HASH }}
        path: core/build/libs/*.jar
        retention-days: 30
