#CI
name: Build ✨ ItsMyConfig ✨

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4

    # Cache Gradle dependencies and wrapper (skip for pull requests)
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      if: github.event_name != 'pull_request'
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Create Gradle Wrapper
      run: gradle wrapper

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build & Test
      run: ./gradlew shadowJar

    - name: Summarize Failed Tests
      if: failure()
      run: |
        echo "## ❌ Failed Tests Summary" >> $GITHUB_STEP_SUMMARY
        # Check if any test result XML files exist
        if ! find core/build/test-results/test/ -name "*.xml" | grep -q .; then
          echo "No test results found. Build likely failed before tests ran." >> $GITHUB_STEP_SUMMARY
          exit 0
        fi

        # Process XML files if they exist
        find core/build/test-results/test/ -type f -name "*.xml" | while read file; do
          module="core"
          fails=$(grep -c "<failure" "$file")
          if [ "$fails" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**$module:**" >> $GITHUB_STEP_SUMMARY
            grep -A 1 "<testcase" "$file" | grep -B 1 "<failure" | grep -E "<testcase|<failure" | while read line; do
              if [[ "$line" == *"<testcase"* ]]; then
                classname=$(echo "$line" | sed -n 's/.*classname="\([^"]*\)".*/\1/p')
                name=$(echo "$line" | sed -n 's/.*name="\([^"]*\)".*/\1/p')
                echo "- ${classname##*.}.${name}" >> $GITHUB_STEP_SUMMARY
              elif [[ "$line" == *"<failure"* ]]; then
                message=$(echo "$line" | sed -n 's/.*<failure[^>]*message="\([^"]*\)".*/\1/p')
                if [ -z "$message" ]; then
                  message="(no message)"
                fi
                echo "  → $message" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
        done

    - name: Extract version and commit hash
      run: |
        echo "PLUGIN_VERSION=$(grep 'version =' build.gradle | awk -F'\"' '{print $2}')" >> $GITHUB_ENV
        echo "COMMIT_HASH=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: itsmyconfig-${{ env.PLUGIN_VERSION }}-${{ env.COMMIT_HASH }}
        path: core/build/libs/*.jar
        retention-days: 30
