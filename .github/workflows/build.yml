#CI
name: Build ✨ ItsMyConfig ✨

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4

    # Cache Gradle dependencies and wrapper (skip for pull requests)
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      if: github.event_name != 'pull_request'
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Create Gradle Wrapper
      run: gradle wrapper

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build & Test
      run: ./gradlew shadowJar

    - name: Summarize Failed Tests
      if: failure()
      run: |
        echo "## ❌ Failed Tests Summary" >> $GITHUB_STEP_SUMMARY

        REPO_URL="https://github.com/Itsme-to/ItsMyConfig/blob/main"
        TEST_SRC="core/src/test/java"

        if ! find core/build/test-results/test/ -name "*.xml" | grep -q .; then
          echo "No test results found. Build likely failed before tests ran." >> $GITHUB_STEP_SUMMARY
          exit 0
        fi

        find core/build/test-results/test/ -type f -name "*.xml" | while read file; do
          awk -v REPO_URL="$REPO_URL" -v TEST_SRC="$TEST_SRC" '
            BEGIN {
              FS = "\n"
              RS = "</testcase>"
            }
            {
              class = ""; method = ""; msg = ""; type = ""; line = "";

              if ($0 ~ /<testcase /) {
                class = gensub(/.*classname="([^"]+)".*/, "\\1", "g", $0)
                method = gensub(/.*name="([^"]+)".*/, "\\1", "g", $0)
              }

              if ($0 ~ /<failure /) {
                msg = gensub(/.*message="([^"]*)".*/, "\\1", "g", $0)
                type = gensub(/.*type="([^"]+)".*/, "\\1", "g", $0)
                if (msg == "") msg = "(no message)"
              }

              if (type != "") {
                key = class
                filepath = TEST_SRC "/" key
                gsub(/\./, "/", filepath)
                filepath = filepath ".java"
                fileurl = REPO_URL "/" filepath

                if (!(key in seen)) {
                  seen[key] = 1
                  print "" >> "'"$GITHUB_STEP_SUMMARY"'"
                  print "#### [" key "](" fileurl ")" >> "'"$GITHUB_STEP_SUMMARY"'"
                }

                if (type == "org.opentest4j.AssertionFailedError") {
                  lineout = "- **" method "** → " msg
                } else {
                  lineout = "- **" method "** → " type ": " msg
                }

                print lineout >> "'"$GITHUB_STEP_SUMMARY"'"
              }
            }
          ' "$file"
        done
 
    - name: Extract version and commit hash
      run: |
        echo "PLUGIN_VERSION=$(grep 'version =' build.gradle | awk -F'\"' '{print $2}')" >> $GITHUB_ENV
        echo "COMMIT_HASH=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: itsmyconfig-${{ env.PLUGIN_VERSION }}-${{ env.COMMIT_HASH }}
        path: core/build/libs/*.jar
        retention-days: 30
